apiVersion: apps/v1
kind: Deployment
metadata:
  name: medical-records-service
  namespace: healthcare-system
  labels:
    app: medical-records-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: medical-records-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: medical-records-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: medical-records-service-sa
      containers:
      - name: medical-records-service
        image: ${ARTIFACT_REGISTRY}/medical-records-service:${IMAGE_TAG}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8080"
        - name: DB_NAME
          value: "medical_records"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: medical-records-service-db-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: medical-records-service-db-credentials
              key: password
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: medical-records-service-db-credentials
              key: host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: medical-records-service-db-credentials
              key: port
        - name: DB_SSL
          value: "true"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: value
        - name: LOG_LEVEL
          value: "info"
        - name: STORAGE_BUCKET
          value: "healthcare-medical-records-${PROJECT_ID}-${ENVIRONMENT}"
        - name: PATIENT_SERVICE_URL
          value: "http://patient-service:8080"
        - name: DOCTOR_SERVICE_URL
          value: "http://doctor-service:8080"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: medical-records-service-config
          mountPath: /app/config
          readOnly: true
        - name: google-cloud-key
          mountPath: /var/secrets/google
          readOnly: true
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: medical-records-service-config
        configMap:
          name: medical-records-service-configmap
      - name: google-cloud-key
        secret:
          secretName: medical-records-service-sa-key
      initContainers:
      - name: check-db-ready
        image: postgres:13-alpine
        command: ['sh', '-c', 
          'until pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER; do echo waiting for database; sleep 2; done;']
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: medical-records-service-db-credentials
              key: host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: medical-records-service-db-credentials
              key: port
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: medical-records-service-db-credentials
              key: username
---
apiVersion: v1
kind: Service
metadata:
  name: medical-records-service
  namespace: healthcare-system
  labels:
    app: medical-records-service
spec:
  selector:
    app: medical-records-service
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: medical-records-service-sa
  namespace: healthcare-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: medical-records-service-configmap
  namespace: healthcare-system
data:
  logging.json: |
    {
      "level": "info",
      "format": "json",
      "service": "medical-records-service"
    }
  file-types.json: |
    {
      "allowedTypes": [
        "application/pdf",
        "image/jpeg",
        "image/png",
        "application/msword",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
      ],
      "maxSize": 10485760
    }
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: medical-records-service-pdb
  namespace: healthcare-system
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: medical-records-service 